#include "TopTagger/TopTagger/interface/TTMDiscriminatorFilter.h"

#include "TopTagger/TopTagger/interface/TopTaggerUtilities.h"
#include "TopTagger/TopTagger/interface/TopTaggerResults.h"
#include "TopTagger/CfgParser/include/Context.hh"
#include "TopTagger/CfgParser/include/CfgDocument.hh"
#include "TopTagger/CfgParser/include/TTException.h"

#include <cstdlib>
#include <cstdio>
#include <cstring>

void TTMDiscriminatorFilter::getParameters(const cfg::CfgDocument* cfgDoc, const std::string& localContextName)
{
    //Construct contexts
    cfg::Context commonCxt("Common");
    cfg::Context localCxt(localContextName);

    discriminator_ = cfgDoc->get("discCut",       localCxt, -999.9);
    discOffset_    = cfgDoc->get("discOffset",    localCxt, 999.9);
    discSlope_     = cfgDoc->get("discSlope",     localCxt, 0.0);

    type_          = static_cast<TopObject::Type>(cfgDoc->get("type",    localCxt, 0));

    bdiscThreshold_  = cfgDoc->get("bdiscThreshold", localCxt, -999.9);
    bEtaCut_         = cfgDoc->get("bEtaCut",        localCxt, -999.9);
    maxNbInTop_      = cfgDoc->get("maxNbInTop",     localCxt, -1);
}

void TTMDiscriminatorFilter::run(TopTaggerResults& ttResults)
{
    //Get the list of top candidates as generated by the clustering algo
    std::vector<TopObject>& topCandidates = ttResults.getTopCandidates();
    //Get the list of final tops into which we will stick candidates
    std::vector<TopObject*>& tops = ttResults.getTops();


    //Apply discriminator and b multiplicity cuts 
    for(auto& topCand : topCandidates)
    {
        //Check the top type
        if(topCand.getType() != type_) continue;

        //get discriminator
        double passDiscriminator = topCand.getDiscriminator() > std::min(discriminator_, discOffset_ + topCand.p().Pt()*discSlope_);
        
        //Check number of b-tagged jets in the top
        bool passBrequirements = maxNbInTop_ < 0 || topCand.getNBConstituents(bdiscThreshold_, bEtaCut_) <= maxNbInTop_;
        
        //place in final top list if it passes the threshold
        if(passDiscriminator && passBrequirements)
        {
            tops.push_back(&topCand);
        }
    }
}

